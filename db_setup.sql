CREATE TABLE LOGIN
(
    ID       INT GENERATED ALWAYS AS IDENTITY,
    LOGIN    VARCHAR UNIQUE NOT NULL,
    PASSWORD VARCHAR(64)    NOT NULL,
    SALT     VARCHAR(64)    NOT NULL,
    PRIMARY KEY (ID)
);


CREATE TABLE ADMIN
(
    IDUSER INT,
    PRIMARY KEY (IDUSER),
    FOREIGN KEY (IDUSER) REFERENCES LOGIN (ID)
);

CREATE TABLE QCM
(
    ID   INT GENERATED ALWAYS AS IDENTITY,
    PATH VARCHAR NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE USERINFO
(
    IDUSER         INT,
    PSEUDO         VARCHAR UNIQUE,
    NOM            VARCHAR,
    PRENOM         VARCHAR,
    DATE_NAISSANCE DATE,
    IMAGE_PROFIL   VARCHAR,
    FOREIGN KEY (IDUSER) REFERENCES LOGIN (ID),
    PRIMARY KEY (IDUSER)
);

CREATE TABLE QCMRESULTS
(
    IDQCM  INT NOT NULL,
    IDUSER INT NOT NULL,
    NOTE   INT,
    FOREIGN KEY (IDQCM) REFERENCES QCM (ID),
    FOREIGN KEY (IDUSER) REFERENCES USERINFO (IDUSER),
    PRIMARY KEY (IDQCM, IDUSER)
);

CREATE TABLE TOPIC
(
    IDTOPIC       INT GENERATED ALWAYS AS IDENTITY,
    NOM_TOPIC     VARCHAR   NOT NULL,
    IDAUTEUR      INT       NOT NULL,
    DATE_CREATION TIMESTAMP NOT NULL,
    FOREIGN KEY (IDAUTEUR) REFERENCES USERINFO (IDUSER),
    PRIMARY KEY (IDTOPIC)
);

CREATE TABLE MESSAGES
(
    IDAUTEUR  INT       NOT NULL,
    IDTOPIC   INT       NOT NULL,
    IDMESSAGE INT GENERATED ALWAYS AS IDENTITY,
    CONTENT   VARCHAR   NOT NULL,
    DATE      TIMESTAMP NOT NULL,
    FOREIGN KEY (IDAUTEUR) REFERENCES USERINFO (IDUSER),
    FOREIGN KEY (IDTOPIC) REFERENCES TOPIC (IDTOPIC),
    PRIMARY KEY (IDAUTEUR, IDTOPIC, IDMESSAGE)
);

CREATE OR REPLACE FUNCTION supprimer_utilisateur()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
AS
$$
DECLARE
    id_utilisateur INT;
BEGIN
    id_utilisateur = OLD.ID;
    UPDATE MESSAGES SET CONTENT = 'Ce message a été supprimé' WHERE IDAUTEUR = id_utilisateur;
    UPDATE MESSAGES SET IDAUTEUR = 3 WHERE IDAUTEUR = id_utilisateur;
    UPDATE TOPIC SET IDAUTEUR = 3 WHERE IDAUTEUR = id_utilisateur;
    DELETE FROM QCMRESULTS WHERE IDUSER = id_utilisateur;
    DELETE FROM USERINFO WHERE IDUSER = id_utilisateur;
    RETURN OLD;
END
$$;

CREATE OR REPLACE TRIGGER trigger_supprimer_messages_utilisateur
    BEFORE DELETE
    ON LOGIN
    FOR EACH ROW
EXECUTE FUNCTION supprimer_utilisateur();
